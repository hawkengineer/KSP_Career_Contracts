// *************************** Homeworld Moon Space Science
// 
// Goal for this contract is to collect missing science in space around the moons of the home planet.
//
CONTRACT_TYPE
{
	name 			= HomeMoonSpaceScience
	sortKey 		= 250
	group 			= MoonExploration
	title			= Collect Orbital Science, perform experiments around @/targetBody
	genericTitle	= Perform experiments to collect science around the target body.
	topic			= Exploration
	notes			= Send a craft or probe to collect science in space around @/targetBody
	synopsis 		= Run the @experiment experiment in space around @/targetBody.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBodyValid1
	
	description 		= Our scientists are not happy with the missing science we could collect in space around @/targetBody.  Launch a mission to collect science data using the @experiment in space.
	genericDescription 	= Our scientists are not happy with the missing science we could collect in space around our home planet.  Launch a mission to collec the missing science data.
	completedMessage	= Success! Our science team is happy with the results, but they fear there is more science to collect.  
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 0.3					// Funds = based on targetBody
	advanceFunds		= @KSP_Contracts:FundAdv * 0.2					// Adv Funds = based on targetBody
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Contracts:homeMoons
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}	
	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		moonOrbitList1		= @KSP_Contracts:orbitedMoons
	}

	DATA
	{
		type 			= List<ScienceExperiment>
        hidden = true		
		experimentAll 	= AvailableExperiments(@targetBody)
	}
	
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		scienceTemp1	= AllScienceSubjectsByBody([@targetBody])
		//scienceTemp1	= AllScienceSubjectsByBodyExperiment([@targetBody], [@experiment])
		scienceTemp2	= @scienceTemp1.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )    			// Find where remaining science is greater than 10% of total science
		scienceTemp3	= @scienceTemp2.Where(sc => sc.Situation() == InSpaceLow || sc.Situation() == InSpaceHigh)	// Limit to InSpace Situations
		scienceList		= @scienceTemp3.Random(4)																	// Select up to three random science collections
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name 	= All
		type	= All

		REQUIREMENT
		{
			name 		= Orbit
			type 		= Orbit
			checkType 	= UNMANNED
		}
		
		REQUIREMENT
		{
			name		= Expression1
			type		= Expression
			title		= Check to make sure we reached the moon from a previous contract
			expression	= (@/moonOrbitList1.Contains(@/targetBody)) == true
		}

		REQUIREMENT
		{
			type = Expression
			expression = @/scienceList.Count() >= 1

			title = Must have a valid experiment to perform
		}

	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
    {
		name = CollectScience
		type = CollectScience

        subject 		= @scienceID
        recoveryMethod 	= Ideal
		rewardFunds = 1000.0 + Random(500.0, 1500.0) * @/scienceList.Count()
		completedMessage = Objective Complete!  We collected @scienceID.Experiment() data!
		title 			= Collect science data from the @scienceID.Experiment() in @scienceID.Situation()
		ITERATOR
        {
            type = ScienceSubject
            scienceID = @/scienceList
 
			REQUIREMENT
			{
				type = Expression
				expression = @../scienceList.Count() > 0
			}

		}

    }

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//
	
}	
		
	