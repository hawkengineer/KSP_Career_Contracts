// *************************** Crewed Airplane Speed Record
// 
// Goal for this contract is to build an airplane and set different speed records
//
CONTRACT_TYPE
{
	name 			= CrewedFlightSpeed
	sortKey 		= 110
	group 			= KerbinAeronautics
	title			= Break the airplane speed record of @targetSpeed m/s
	genericTitle	= Break the target speed in an airplane
	topic			= Exploration
	notes			= Break the target speed in an airplane
	synopsis 		= Break the target speed in an airplane
	cancellable		= false
	declinable 		= false
	autoAccept		= true
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 1
	maxSimultaneous = 1
	targetBody		= HomeWorld()
	
	description 		= We need to break the speed of sound using an airplane and keep going faster.  Build an airplane and fly it faster than @targetSpeed m/s.
	genericDescription 	= Build, design, and fly an airplane faster than the target speed and return safely home.
	completedMessage		= Success!  We reached the desired speed and returned safely!  Let's see how much faster we can go!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @curFunds										// Funds = $30,000
	advanceFunds		= @KSP_Contracts:FundAdv * 0.4					// Adv Funds = $15,000
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
    DATA
    {
        type = List<float>

        crewedSpeeds = [ 343, 686, 1029, 1372, 1715 ]
    }
	DATA
	{
		type 		= float
		SpdIndex	= SpeedIndex
	}
	DATA
	{
		type 		= float
		targetSpeed = @crewedSpeeds.ElementAt(@SpdIndex)
	}
	DATA
	{
		type 	= float
		curFunds 	= 5000.0 + (10000.0 * @targetSpeed / 343)
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstLaunch
		title = Complete @contractType Contract
	}

    REQUIREMENT
    {
        type = Expression
        title = Crewed Speed Index

        expression = @/SpdIndex < @/crewedSpeeds.Count()
    }

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Reach the target speed of @/targetSpeed m/s and maintain for 1 minute.
		define = lowAirplane
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
			maxCrew = 99
			title = Have at least 1 crewmember on board
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Plane
			name = Vessel needs to be a plane.
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			title = Reach the target speed of @/targetSpeed m/s and hold for 1 minute.
			minSpeed = @/targetSpeed

			disableOnStateChange = true
			
			PARAMETER
			{
				name = Duration
				type = Duration
				duration = 1m
				preWaitText = Reach specified speed.
				waitingText = Waiting for 1 minute, maintain the speed.
				completionText = Flight completed, you are cleared to land.
			}
		}
		PARAMETER
		{
			name = land
			type = ReachState
			title = Land back at the KSC
			maxSpeed = 1
			situation = LANDED
			biome = Runway
			disableOnStateChange = false
			completeInSequence = true
		}
	
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviors
	//
    BEHAVIOUR
    {
        name = IncrementIndex
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            SpeedIndex = SpeedIndex + 1
        }
    }	


}	
		
	