// *************************** Probe Asteroid Landing Sample Return
// 
//
CONTRACT_TYPE
{
	name 			= ProbeAsteroidSample
	sortKey 		= 310
	group 			= Satellites
	title			= Asteroid Sample Return Probe Mission
	//genericTitle	=
	topic			= Exploration
	notes			= Design, launch and Rendezvous with an Asteroid, collect sample and return home safely.
	synopsis 		= Design, launch and Rendezvous with an Asteroid, collect sample and return home safely.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 2
	maxSimultaneous = 1
	targetBody		= HomeWorld().Parent()
	
	description 		= Design, launch and rendevous with an asteroid with a probe.  Attached to the asteroid body and collect science sample and return safely back home.
	//genericDescription 	= 
	completedMessage		= We completed the mission!  Our probe has returned safely home with the valuable surface sample science!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 3.7				// Funds = $30,000
	advanceFunds		= @KSP_Contracts:FundAdv * 0.8					// Adv Funds = $15,000
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Significant
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA
    {
        type = List<Vessel>
		requiredValue = true
        targetAsteroid = AllVessels().Where(v => v.VesselType() == SpaceObject )
		title = Determine if there is valid Asteroids within the system
    }		
	DATA
	{
		type	= int
		requiredValue = true
		hidden = true
		title = Make sure there is space objects to land
		asteroidCount = @/targetAsteroid.Count()
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = ProbeAsteroidLanding
		title = Complete @contractType Contract
	}

	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = ProbeAsteroidSample
		cooldownDuration = 180d
		title = Wait at least 180 days after completing a previous mission
	}	

	REQUIREMENT
	{
		name = Expression
		type = Expression
		title		= Verify there is valid Asteroids orbiting the Sun
		expression	= @/asteroidCount >= 1		
	}
	

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = AsteroidLander
		type = VesselParameterGroup
		title = Uncrewed Landing on an Asteroid
		define = AsteroidLander
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
		}
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleAsteroid
			minCount = 1
			title = Attach to the Asteroid with the Grabbing Device
			hideChildren = true
		}
	}
	
	PARAMETER
	{
		name = Rendezvous
		type = Rendezvous
		vessel = AsteroidLander	
		distance = 1000
		title = Rendezvous with an Asteroid
		completeInSequence = true
	}
	PARAMETER
	{
		name = SurfaceScience
		type = CollectScience
		recoveryMethod = Recover
		situation = SrfLanded
		title = Collect science sample data from the Surface of the Asteroid
		hideChildren = true
		completeInSequence = true
	}

	PARAMETER
	{
		name = ReturnHome
		type = ReturnHome
		targetBody = HomeWorld()
		title = Return to Home Safely with the Samples
		hideChildren = true
		completeInSequence = true
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//

}	
		
	