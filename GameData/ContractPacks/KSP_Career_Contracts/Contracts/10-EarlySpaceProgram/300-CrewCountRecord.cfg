// *************************** Crew Count In Space Record
// 
// Goal for this contract is to send different numbers of crew into space
//
CONTRACT_TYPE
{
	name 			= CrewCount
	sortKey 		= 300
	group 			= EarlySpaceProgram
	agent			= HumanSpaceflightAgency
	title			= Set Crew Count record of @targetCrewCount Crew in Space.
	genericTitle	= Set new Crew Count Record
	topic			= Exploration
	notes			= Send target number of crew into space.
	synopsis 		= Send @targetCrewCount crew into space to set a new record.
	cancellable		= false
	declinable 		= false
	autoAccept		= true
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= HomeWorld()
	
	description 			= How many Kerbals can we have in space at one time.  Send a craft with @targetCrewCount crew into space within the same vessel. 
	genericDescription 		= Send a craft with target crew number into space.
	completedMessage		= Congratulations!  We set a new record for crew number in space at the same time.  Soon we could think about starting a colony somewhere...
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @curFunds										// Variable
	advanceFunds		= @KSP_Contracts:FundAdv * 0.5					// Adv Funds = $25,000
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
    DATA
    {
        type = List<float>

        crewCounts = [ 2, 3, 4, 5 ]
    }
	
    DATA
    {
        type = float

        crewCountsIndex = countIndex
    }
	
   DATA
    {
        type = float

        targetCrewCount = @crewCounts.ElementAt(@crewCountsIndex)
    }
    
	DATA
	{
		type 	= float
		curFunds 	= 5000.0 + (@targetCrewCount * 5000.0)
	}
	

	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = CrewOrbit
		title = Complete @contractType Contract
	}

    REQUIREMENT
    {
        type = Expression
        title = Crewed Duration

        expression = @/crewCountsIndex < @/crewCounts.Count()
    }
	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = crewCountInSpace
		type = All
		title = Have @/targetCrewCount on the same vessel while in space in a stable orbit.
		
		disableOnStateChange = False
		
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = ORBITING
			situation = ESCAPING
			
			targetBody = AllBodies()
			
			disableOnStateChange = False
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = @/targetCrewCount
			
			disableOnStateChange = False
		}
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviors
	//
    BEHAVIOUR
    {
        name = IncrementIndex
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            countIndex = countIndex + 1
        }
    }	
	
	
}	
		
	