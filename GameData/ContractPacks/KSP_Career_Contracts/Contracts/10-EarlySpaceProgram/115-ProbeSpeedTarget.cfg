// *************************** Probe Speed Target Contract
// 
// Goal for this contract is to build and set various speed records with a probe.  
//
CONTRACT_TYPE
{
	name 			= ProbeSpeed
	sortKey 		= 115
	group 			= EarlySpaceProgram
	title			= Probe Speed Record of @probeTargetSpd m/s.
	genericTitle	= Send a probe to reach the target speed.
	topic			= Exploration
	notes			= Send a probe to reach the target speed.
	synopsis 		= Send a probe to reach and exceed the target speed record of @probeTargetSpd m/s.
	cancellable		= false
	declinable 		= false
	autoAccept		= true
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= HomeWorld()
	
	description 		= Launch a probe to reach the target speed of @probeTargetSpd m/s.
	genericDescription 	= Send a probe to reach the target speed record.
	completedMessage	= Congratulations!  The probe exceeded the target speed, onto the next objective!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @rep											// Reputation: Variable
	rewardFunds			= @funds										// Funds = Variable
	advanceFunds		= @KSP_Contracts:FundAdv * 0.3					// Adv Funds = $15,000
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Failure Funds = 
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA
	{
		type		= List<float>
		probeSpd	= [ 200, 600, 1200, 1500, 2000, 2500]
	}
	DATA
	{
		type 		= float
		probeSpdNum	= SpeedIndex
	}
	DATA
	{
		type			= float
		probeTargetSpd 	= @probeSpd.ElementAt(@probeSpdNum)
	}
	DATA
	{
		type		= float
		funds		= 10000.0 + Min(@probeTargetSpd * 5.0, 5000 + @probeTargetSpd * 3.5)
	}
	DATA
	{
		type 		= float
		rep			= 3.0 + Min(@probeTargetSpd * 0.05, 10 + @probeTargetSpd * 0.01)
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstLaunch
		title = Complete @contractType Contract
	}

	REQUIREMENT
	{
		type		= Expression
		title		= Valid Altitude Index
		expression 	= @/probeSpdNum < @/probeSpd.Count()
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
    PARAMETER
    {
        name = ReachState
        type = ReachState

        minSpeed = @/probeTargetSpd
    }
	
	//-------------------------------------------------------------------------------------------------------------------------
	// Contract Behaviors
	//
	BEHAVIOUR
	{
		name 	= IncrementIndex
		type 	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			SpeedIndex = SpeedIndex + 1
		}
	}

}	
		
	