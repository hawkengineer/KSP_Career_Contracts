// *************************** Inner Planet Rover Missions
// 
//
CONTRACT_TYPE
{
	name 			= InnerPlanetRoverMission
	sortKey 		= 145
	group 			= InnerPlanetExploration
	title			= Rover Exploration of the Planet @/targetBody
	genericTitle	= Rover Exploration of the Inner Planets
	topic			= Exploration
	notes			= Use the rover on the surface of @/targetBody and explore the @/biomeMax biomes
	synopsis 		= Use the rover on the surface of @/targetBody and explore the @/biomeMax biomes
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 1
	maxSimultaneous = 1
	targetBody		= @/targetBodyValid1
	
	description 		= We successfully landed a rover on the surface of @/targetBody, now we want to further our exploration.  Send your rover to the @/biomeMax different biomes and collect science data.
	genericDescription 	= We landed a rover on the surface, now further explore the planet by sending the rover to different biomes.
	completedMessage	= Mission Complete!  We were able to send the rover to all the different biomes and collected valuable data.
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 0.7					// Funds = $30,000
	advanceFunds		= @KSP_Contracts:FundAdv * 0.7					// Adv Funds = $15,000
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Contracts:innerBodiesSurface
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}	
	DATA
	{	
		type 				= List<Vessel>
		requiredValue		= true
		hidden				= true
		roverTarget			= AllVessels().Where(v => v.VesselType() == Rover && v.IsLanded() && v.CelestialBody() == @/targetBody).SelectUnique()
		title 				= Must have a rover on the surface of the planet
	}

	DATA
	{
		type				= List<Biome>
		requiredValue		= true
		hidden				= true
		title				= Generate list of valid Biomes for the planet
		biomeList			= @/targetBody.Biomes()
	}	

	DATA
	{
		type				= int
		biomeMax			= @/biomeList.Count()
		hidden				= true
		title 				= Count the remaining biomes
	}


	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = All
		type = All
		
		REQUIREMENT
		{
			name = Landing
			type = Landing
			checkType = UNMANNED
		}
		REQUIREMENT
		{
			name = RoverCheck
			type = Expression
			expression = @/roverTarget.Count() == 1 
			title = Need a rover landed on the surface of the planet
		}
		REQUIREMENT
		{
			name = BiomeCheck
			type = Expression
			expression = @/biomeList.Count() >= 1
			title = Need valid biomes to explore
		}

	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = RoverExploration
		type = VesselParameterGroup
		title = Send rover to explore the different biome
		vessel = @/roverTarget
		
		PARAMETER
		{
			name = ReachState
			type = ReachState
			biome = @biomeTarget
			title = Send @/roverTarget to the @/biomeMax different biomes
			rewardFunds = @KSP_Contracts:FundComp * 0.1
			completedMessage = Success! The @/biomeMax different biomes has been reached!

			PARAMETER
			{
				name = CollectScience
				type = CollectScience
				biome = @../biomeTarget
				recoveryMethod = Transmit
			}
			
			ITERATOR
			{
				type 		= Biome
				biomeTarget = @/biomeList
			}
			REQUIREMENT
			{
				type 		= Expression
				name		= ValidBiome
				expression 	= @/biomeList.Count() > 0
			}
		}
		
	}
			



	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//


}	
		
	