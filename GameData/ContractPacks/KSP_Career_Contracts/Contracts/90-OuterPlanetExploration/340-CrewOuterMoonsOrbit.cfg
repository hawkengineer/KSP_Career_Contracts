// *************************** Outer Planetary Landings With Crew
// 
//
CONTRACT_TYPE
{
	name 			= CrewOuterMoonsOrbit
	sortKey 		= 340
	group 			= OuterPlanetExploration
	title			= Crew Orbit of the Moons around @/targetBody
	genericTitle	= Outer Planet Moon Crew Orbit 
	topic			= Exploration
	notes			= Launch a craft with at least 2 crew and orbit the moons of @/targetBody. Return safely home.
	synopsis 		= Launch a craft with at least 2 crew and orbit the moons of @/targetBody. Return safely home.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	//minExpiry		= 0
	//maxExpiry		= 0
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBodyValid1
	
	description 		= We orbited the planet of @/targetBody but we were unable to orbit some of the moons.  Design a mission to send at least 2 crew back to @/targetBody and land on the Moons.
	genericDescription 	= Design a mission to orbit the moons of the Outer planets.
	completedMessage	= Congratulations! Our crew was successful in orbiting the Moons of @/targetBody. The crew is happy to be back home!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 1.1					// Funds = $30,000
	advanceFunds		= @KSP_Contracts:FundAdv * 0.5					// Adv Funds = $15,000
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Contracts:outerBodies
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		uniquenessCheck 	= GROUP_ACTIVE
		targetBodyValid1	= @/targetBody1
	}	
	DATA 
	{	
		type 				= List<CelestialBody>
		targetMoons			= @/targetBody.Children()
		title				= Find the planet's moons 
	}
	DATA
	{
		type				= int
		moonCount 			= @/targetMoons.Count()
		nextCount			= @/nextMoons.Count()
		title				= Determine the number of moons
	}
	DATA
	{
		type 				= List<CelestialBody>
		requiredValue		= false
		title				= find moons that are in the NextUnreachedBodies
		nextMoons			= NextUnreachedBodies(30).Where(cb => cb.IsMoon() && cb.Parent() == @/targetBody)
	}


	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//

	REQUIREMENT
	{
		name = ReturnFromOrbit
		type = ReturnFromOrbit
		checkType = MANNED
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = Determine if there are moons to orbit
		expression = @/nextMoons.Count() >= 1
	}
		

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = CrewOrbit
		type = VesselParameterGroup
		title = Orbit the Moons around the planet of @/targetBody.
		define = CrewOuterMoon
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}

		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Needs to have at least 2 crew members
			hideChildren = true
		}

		PARAMETER
		{
			name = MoonOrbit
			type = ReachState
			situation = ORBITING
			targetBody = @targetMoon
			optional = false
			title = Enter into orbit around the Moon of @targetMoon
			rewardFunds = @KSP_Contracts:FundComp * 0.3
			ITERATOR
			{
				type 	= CelestialBody
				targetMoon = @/targetMoons
			}
			
			REQUIREMENT
			{
				type = Expression
				name = MoonCheck
				expression = @/targetMoons.Count() > 0
			}
			
		}

		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Home Safely
			hideChildren = true
			completeInSequence = true
		}	

		PARAMETER
		{
			name = RecoverVessel
			type = RecoverVessel
			title = Safely return home and recover the craft/vessel
			completeInSequence = true
		}

	}
	

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//


}	
		
	