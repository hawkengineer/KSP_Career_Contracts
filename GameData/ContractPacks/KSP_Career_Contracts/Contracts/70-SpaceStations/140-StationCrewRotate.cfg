// *************************** Rotate a crew from the Space Station
// 
// Goal for this contract is to rotate a crew from the station
//
CONTRACT_TYPE
{
	name 			= StationCrewRotate
	sortKey 		= 140
	group 			= SpaceStations
	title			= Crew rotation on the Space Station, @/targetVessel1, orbiting @/targetBody
	genericTitle	= Crew rotation on the Space Station.
	topic			= Space Station
	notes			= Send a new crew to the Space Station, @/targetVessel1, orbiting @/targetBody.  Bring back the current crew.
	synopsis 		= Send a new crew to the Space Station, @/targetVessel1, orbiting @/targetBody.  Bring back the current crew.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 1
	maxSimultaneous = 1
	targetBody		= @/targetBody1
	
	description 		= Our crew on the space station, @/targetVessel1, orbiting @/targetBody needs to come home.  Send a new crew to the station and bring the current Kerbals on the station home.
	genericDescription 	= Send a new crew to the space station and bring back the current Kerbals.
	completedMessage		= Mission Complete!!! The crew rotation was successful and the Kerbals are enjoying a well deserved rest!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.1				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 3.1					// Funds = $140,000
	advanceFunds		= @KSP_Contracts:FundAdv * 0.8					// Adv Funds = $40,000
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).SelectUnique()
		title = Get your space station
    }	

	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
		title = Get the target body where the station is located
	}
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
		title = Get your list of Kerbals to return
    }

	DATA
	{
		type = Double
		requiredValue = false
		maxCrewNum = @/targetVessel1.CrewCapacity()
	}
	DATA
	{
		type = int
		requiredValue = false
		curCrew	= @/targetKerbals.Count()
	}

	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = StationOneYear
		title = Complete @contractType Contract
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		minCount = 0
		contractType = StationCrewRotate
		cooldownDuration = 60d
		title = Wait at least 60 days after completing a previous Crew Rotation contract
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @KSP_Contracts:randomRoll > 4
		title = Add some variability to when the contract triggers
	}

	REQUIREMENT
	{
		name = StationCheck
		type = Expression
		expression = (@/targetVessel1.IsOrbiting()) == true
		title = The station should be in orbit.
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = StationCrewRotate
		type = VesselParameterGroup
		title = Send up a New Crew
		
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = @/curCrew
			title = Have at least @/curCrew crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}		
	}
	
	PARAMETER
	{
		name = SSCrewReturn
		type = VesselParameterGroup
		title = Bring the crew home!
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Crew Home Safely
			hideChildren = true
			completeInSequence = true
		}
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}
		
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//

}	
		
	