// *************************** Resupply Space Station with LFO
// 
//
CONTRACT_TYPE
{
	name 			= StationResupplyFuel
	sortKey 		= 190
	group 			= SpaceStations
	title			= Resupply the space station @/targetVessel1 in orbit around @/targetBody with LFO
	genericTitle	= Resupply the space station with LFO
	topic			= Space Station
	notes			= Design a mission to resupply the space station, @/targetVessel1 in orbit around @/targetBody with LFO
	synopsis 		= Design a mission to resupply the space station, @/targetVessel1 in orbit around @/targetBody with LFO
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBody1
	
	description 		= The LFO supply on @/targetVessel1 is getting low, we need to send a resupply mission to add more LFO to the station.
	genericDescription 	= Resupply the space station with LFO.
	completedMessage		= Mission Complete!!! We have resupplied @/targetVessel1 with enough LFO to continue our operations.
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.1				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 2.5					// Funds = Variable
	advanceFunds		= @KSP_Contracts:FundAdv * 1.0					// Adv Funds = Variable
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//

	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0 && v.IsOrbiting() && (v.ResourceQuantity(LiquidFuel) / v.ResourceCapacity(LiquidFuel))<=0.5).SelectUnique()
		title = Must have an open Docking Port and 50% or less of fuel
	}

	DATA
	{
		type = int
		LFSpace = Round(@/targetVessel1.ResourceCapacity(LiquidFuel) - @/targetVessel1.ResourceQuantity(LiquidFuel))
		OxSpace = Round(@/targetVessel1.ResourceCapacity(Oxidizer) - @/targetVessel1.ResourceQuantity(Oxidizer))
		title = Get empty space for LFO
	}

	DATA
	{
		type = Double
		requiredValue = true
		hidden = true
		LFCurrent 	= @/targetVessel1.ResourceQuantity(LiquidFuel)
		OxCurrent 	= @/targetVessel1.ResourceQuantity(Oxidizer)
		LFNew		= @/LFCurrent + (LFSpace * 0.80)    // Increase to 80% of available space
		OxNew		= @/OxCurrent + (OxSpace * 0.80)	// Increase to 80% of available space
	}


	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}


	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = StationSixMonths
		title = Complete @contractType Contract
	}

	REQUIREMENT
	{
		name = ReturnFromOrbit
		type = ReturnFromOrbit
		checkType = MANNED
	}

	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = StationResupplyFuel
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous mission
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = Space Station needs to have fuel capacity
		expression = (@/targetVessel1.ResourceCapacity(LiquidFuel) > 0)
	}



	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//

	PARAMETER
	{
		name = ResupplyFuel
		type = VesselParameterGroup
		title = Increase the LFO Amount on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = AllResources
			type = All
			title = Launch a new module with LF and Ox.
			notes = This can be performed in multiple launches
			hideChildren = true
			
			PARAMETER
			{
				name = HasFuel
				type = HasResource
				resource = LiquidFuel
				minQuantity = 100
				title = Launch a new module with at least 100 units of Liquid Fuel
				hideChildren = true
			}
			PARAMETER
			{
				name = HasOxidizer
				type = HasResource
				resource = Oxidizer
				minQuantity = 100
				title = Launch a new module with at least 100 units of Oxidizer
				hideChildren = true
			}
			PARAMETER
			{
				name = DockingPort
				type = PartValidation
				partModule = ModuleDockingNode
				minCount = 1
				title = Have at least 1 Docking Ports
				hideChildren = true
			}
		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = false
		completeInSequence = true
	}

	PARAMETER
	{
		name = StationSupply
		type = VesselParameterGroup
		title = Increase the LFO Amount on @/targetVessel1
		disableOnStateChange = true	
		vessel = @/targetBody1

		PARAMETER
		{
			name = AllResources
			type = All
			title = Space Station New Supply Levels.
			notes = This can be performed in multiple launches
			hideChildren = true
			
			PARAMETER
			{
				name = HasFuel
				type = HasResource
				resource = LiquidFuel
				minQuantity = @/LFNew
				title = Resupply the station with at least @/LFNew units of Liquid Fuel
				hideChildren = true
			}
			PARAMETER
			{
				name = HasOxidizer
				type = HasResource
				resource = Oxidizer
				minQuantity = @/OxNew
				title = Resupply the station with at least @/OxNew units of Liquid Fuel
				hideChildren = true
			}
		}
	}


	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//

}	
		
	