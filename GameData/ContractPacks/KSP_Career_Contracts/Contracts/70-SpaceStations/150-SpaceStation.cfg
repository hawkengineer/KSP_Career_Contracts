// *************************** Build a new Space Station
// 
// Goal for this contract is to build a new space station around a target body
//
CONTRACT_TYPE
{
	name 			= SpaceStation
	sortKey 		= 150
	group 			= SpaceStations
	title			= Build new Space Station in orbit around @/targetBody
	genericTitle	= Build new Space Station in orbit around target
	topic			= Space Station
	notes			= Build new Space Station in orbit around @/targetBody
	synopsis 		= Build new Space Station in orbit around @/targetBody
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBody1
	
	description 		= We need to expand into the system...build a new Space Station in orbit around @/targetBody.
	genericDescription 	= Send a new crew to the space station and bring back the current Kerbals.
	completedMessage		= Mission Complete!!! Our new Space Station is complete and ready for crew!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.1				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 4.0					// Funds = Variable
	advanceFunds		= @KSP_Contracts:FundAdv * 1.0					// Adv Funds = Variable
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Significant
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
    DATA
    {
        type = List<Vessel>
		requiredValue = false
        stationList = AllVessels().Where(v => v.VesselType() == Station)
		title = Find the all Space Stations
    }

    DATA
    {
        type = CelestialBody
        requiredValue = false
        uniquenessCheck = CONTRACT_ACTIVE
        targetBody1 = ReturnedFromBodies().Where(body => @/stationList.Where(v => v.CelestialBody() == body).Count() == 0).SelectUnique()
		title = Must have returned from a Celestial Body, but not have any stations deployed.
    }
	
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = StationSixMonths
		title = Complete @contractType Contract
	}

	REQUIREMENT
	{
		name = ReturnFromOrbit
		type = ReturnFromOrbit
		checkType = MANNED
	}


	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = NewSpaceStation
		type = VesselParameterGroup
		title = Launch your new space station into orbit around @/targetBody1
		notes = The station must include at least 1 Docking Port, Power Generation, support for at least 2 crew, MonoPropellant and Electric Storage
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Station
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 2
			title = Space for at least 2 crew
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
		
		// Have Power Generation
		PARAMETER
		{
			name = PowerGeneration
			type = Any
			title = Have any type of Power Generation on your Station
			
			PARAMETER
			{
				name = PartValidationSolar
				type = PartValidation
				partModule = ModuleDeployableSolarPanel
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
			PARAMETER
			{
				name = PartValidationRTG
				type = PartValidation
				partModule = ModuleGenerator
				minCount = 1
				title = Have at least 1 RTG
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidationNFSolar
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				minCount = 1
				title = Have at least 1 Curved Solar Panel
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFFission
				type = PartValidation
				partModule = FissionReactor
				minCount = 1
				title = Have at least 1 Fisson Reactor
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFRTG
				type = PartValidation
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
		}
		
		// Have Science Lab if StationScience NOT installed
		PARAMETER:NEEDS[!StationScience]
		{
			name = ScienceLab
			type = PartValidation
			title = Have at least one Science Lab on the station
			minCount = 1
			partModule = ModuleScienceLab
			hideChildren = true
		}
		
		// Have Science Lab if StationScience is installed
		PARAMETER:NEEDS[StationScience]
		{
			name = StationScienceSupport
			type = Any
			title = Have any type of Science Lab on your Station
			
			PARAMETER
			{
				name = ScienceLab
				type = PartValidation
				title = Have at least one Science Lab on the station
				minCount = 1
				partModule = ModuleScienceLab
				hideChildren = true
			}
			PARAMETER
			{
				name = StationScienceLab
				type = PartValidation
				title = Have at least one Research Facility on the station
				minCount = 1
				partModule = StationScienceModule
				hideChildren = true
			}
		}
		PARAMETER
		{
			name = HasBatteryCapacity
			type = HasResourceCapacity
			resource = ElectricCharge
			minQuantity = Round(Random(1000.0, 5000.0))
			title = Have capacity for at least @minQuantity Electric Charge
			hideChildren = true
		}		
		PARAMETER
		{
			name = HasMonoProp
			type = HasResourceCapacity
			resource = MonoPropellant
			minQuantity = Round(Random(150.0, 500.0))
			title = Have capacity for at least @minQuantity MonoPropellant Fuel (don't forget to include some RCS thrusters to make sure you can move the station)
			hideChildren = true
		}
		PARAMETER
		{
			name = Cupola
			type = PartValidation
			part = cupola
			title = Have a Cupola (optional)
			minCount = 1
			hideChildren = true
			optional = true
		}
		PARAMETER
		{
			name = StationOrbit
			type = Orbit
			situation = ORBITING
			maxAltitude = @/targetBody1.SpaceAltitudeThreshold()
			title = Put your space station into a stable orbit
			completeInSequence = true
		}
		PARAMETER
		{
			name = VesselIsStation
			type = VesselIsType
			vesselType = Station
			title = Set your vessel type to Station
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//

}	
		
	