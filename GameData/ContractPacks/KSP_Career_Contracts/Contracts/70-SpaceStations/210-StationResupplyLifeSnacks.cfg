// *************************** Resupply Space Station with Life Support Material
// 
//
CONTRACT_TYPE:NEEDS[Snacks]
{
	name 			= StationResupplyLife
	sortKey 		= 210
	group 			= SpaceStations
	title			= Resupply the space station @/targetVessel1 in orbit around @/targetBody with Life Support Material
	genericTitle	= Resupply the space station with Life Support Material
	topic			= Space Station
	notes			= Design a mission to resupply the space station, @/targetVessel1 in orbit around @/targetBody with Life Support Material
	synopsis 		= Design a mission to resupply the space station, @/targetVessel1 in orbit around @/targetBody with Life Support Material
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBody1
	
	description 		= The Life Support Material on @/targetVessel1 is getting low, we need to send a resupply mission to add more Mono Propellant to the station.
	genericDescription 	= Resupply the space station with Life Support Material.
	completedMessage		= Mission Complete!!! We have resupplied @/targetVessel1 with enough Life Support Material to continue our operations.
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.1				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 1.8					// Funds = Variable
	advanceFunds		= @KSP_Contracts:FundAdv * 1.0					// Adv Funds = Variable
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//

	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0 && v.IsOrbiting() && (v.ResourceQuantity(Snacks) / v.ResourceCapacity(Snacks))<=0.5).SelectUnique()
		title = Must have an open Docking Port and 50% or less of life support material
	}

	DATA
	{
		type = int
		snacksSpace = Round(@/targetVessel1.ResourceCapacity(Snacks) - @/targetVessel1.ResourceQuantity(Snacks))
		title = Get empty space for life support material
	}

	DATA
	{
		type = Double
		requiredValue = true
		hidden = true
		snackCurrent 	= @/targetVessel1.ResourceQuantity(Snacks)

		snackNew		= @/snackCurrent + (snacksSpace * 0.80)    // Increase to 80% of available space

		
	}


	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}


	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = StationSixMonths
		title = Complete @contractType Contract
	}

	REQUIREMENT
	{
		name = ReturnFromOrbit
		type = ReturnFromOrbit
		checkType = MANNED
	}

	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = StationResupplyLife
		cooldownDuration = 30d
		title = Wait at least 30 days after completing a previous mission
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = Space Station needs to have life support material capacity
		expression = (@/targetVessel1.ResourceCapacity(Snacks) > 0)
	}



	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//

	PARAMETER
	{
		name = ResupplyLife
		type = VesselParameterGroup
		title = Increase the life support material Amount on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}

		PARAMETER
		{
			name = AllResources
			type = Any
			title = Launch a new module with life support material.
			notes = This can be performed in multiple launches
			hideChildren = true
			
			PARAMETER
			{
				name = HasFood
				type = HasResource
				resource = Snacks
				minQuantity = 25
				title = Launch a new module with at least 25 units of Snacks
				hideChildren = true
			}

		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = false
		completeInSequence = true
	}

	PARAMETER
	{
		name = StationSupply
		type = VesselParameterGroup
		title = Increase the life support Amount on @/targetVessel1
		disableOnStateChange = true	
		vessel = @/targetBody1

		PARAMETER
		{
			name = AllResources
			type = All
			title = Space Station New Supply Levels.
			notes = This can be performed in multiple launches
			hideChildren = true
			
			PARAMETER
			{
				name = HasFood
				type = HasResource
				resource = Snacks
				minQuantity = @/snackNew
				title = Resupply the station with at least @/snackNew units of food
				hideChildren = true
			}

	}


	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//

}	
		
	