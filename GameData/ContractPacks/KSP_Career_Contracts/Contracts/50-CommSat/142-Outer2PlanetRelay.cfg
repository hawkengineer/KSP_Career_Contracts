// *************************** Planet Comm Network Relay
// 
// Goal for this contract is to build and launch a two satellite comm relay network about planets in the system after they were orbited.
//
CONTRACT_TYPE
{
	name 			= Outer2PlanetRelay
	sortKey 		= 142
	group 			= CommSatGroup
	title			= Setup a Communications Relay Satellite for future missions to @targetBody
	genericTitle	= Create communications relay network for a visited planet.
	topic			= Communications
	notes			= Build, launch and place communications relay satellites in orbit about @targetBody
	synopsis 		= Build a network of two relay satellites in orbit around @targetBody.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	maxCompletions 	= 1
	maxSimultaneous = 1
	targetBody		= @/targetBodyValid1
	
	description 			= We need to setup some communication coverage for future missions around @targetBody. Build and place a relay satellite in orbit around @targetBody.
	genericDescription 		= We need global coverage for future missions, setup a satellite relay network around a planet.
	completedMessage		= Success!  Mission control is connect
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Contracts:RewardSci * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Contracts:RewardRep * Random(1.0, 2.0)	// Reputation Increase ~10 to 20
	rewardFunds			= @KSP_Contracts:FundComp * 1.0					// Funds = targetBody dependent
	advanceFunds		= @KSP_Contracts:FundAdv * 0.7					// Adv Funds = targetBody dependent
	failureReputation 	= @rewardReputation * 0.5						// Reputation = 15
	failureFunds		= @rewardFunds * 0.8							// Set to 80% of reward funds
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Contracts:outerBodies2
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}
	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		planetList1			= @KSP_Contracts:OrbitedBodies
	}
	DATA
	{
		type 			= Double
		hidden			= true
		minRelayPower	= @CommSatGroup:minRelayOuter2
	}
	DATA
	{
		type = double
		maxAp = @/targetBody.SphereOfInfluence() * 1.0    // 100% of planet body SOI
		minRelayPower = 5000000 // HG-5 or equivalent
	}
	DATA
	{
		type 		= List<CelestialBody>
		validSearch	= [@/targetBody]
	}
	
	DATA
	{
		type			= List<Vessel>
		hidden			= true
		requiredValue 	= false
		bodyVessels		= AllVessels().Where(v => @validSearch.Contains(v.CelestialBody()))
		orbitVessels	= @bodyVessels.Where(v => v.IsOrbiting())
		validVessels	= @orbitVessels.Where(v => v.Orbit().Apoapsis() < @/maxAp && v.Orbit().Inclination() <= 3)
		validRelays		= @validVessels.Where(v => v.AntennaRelayPower() >= @/minRelayPower && v.VesselType() == Relay)
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name		= Expression1
		type		= Expression
		title		= Must have orbited the planet
		expression 	= (@/planetList1.Contains(@/targetBodyValid1)) == true
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = HomeRelayNetwork
		title = Complete @contractType Contract
	}
	REQUIREMENT
	{
		name		= Expression2
		type 		= Expression
		title 		= Need to maintain at least two relay network satellites in orbit.
		expression 	= @/validRelays.Count() < 2
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
    PARAMETER
    {
        name = CommSatX
        type = VesselParameterGroup

        define = CommSatX
        disableOnStateChange = false

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = Needs to be a probe (uncrewed)
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
		
			vesselType = Relay
		}
 
		PARAMETER
	    {
		    name = HasAntenna
		    type = HasAntenna
		    minAntennaPower = @/minRelayPower
		    antennaType = RELAY
		    notes = Don't forget to extend antennas that need extending!
	    }
		PARAMETER
        {
            name = Orbit
            type = Orbit

            // Minimum distance to have line of sight for 3 satellites for Kerbin.
            minPeA = @/targetBody.Radius()

            // Pretty close to circular
            maxEccentricity = 0.004

            // Pretty close to equatorial
            maxInclination = 3
        }
    }  

    PARAMETER
    {
        name = Duration
        type = Duration

        duration = 2d

        preWaitText = Testing time after network up
        waitingText = Performing shake-out testing
        completionText = Shake-out testing completed
    }

}	
		
	