CONTRACT_GROUP
{
	name = KSP_Contracts
	displayName = Kerbal Space Program
	agent = Kerbal Space Program
	minVersion = 1.15.0
	maxSimultaneous = 0
	maxCompletions = 0
	tip = Exploring The Kerbal Universe!


	// Disable some of the stock contracts
	disabledContractType = ExploreBody
	disabledContractType = BaseContract
	disabledContractType = CollectScience
	disabledContractType = ExplorationContract
	disabledContractType = PlantFlag
	disabledContractType = GrandTour
	disabledContractType = OrbitalConstructionContract
	disabledContractType = PartTest
	disabledContractType = SatelliteContract
	disabledContractType = StationContract

	DATA
	{
		// Find the location of the HomeWorld by determining the SMA of the HomeWorld
		// Set the different difficulty factors for the contract subgroups
		//
		type = Double
		requiredValue = false
		homeWorldSMA = HomeWorld().SemiMajorAxis()
		//homePeriod = HomeWorld().RotationalPeriod()
	}
	DATA
	{
		type			= Double
		requiredValue	= false
		//  Outer1 Range for Relay is 100000000 km (max distance between home and planet)
		// 	Outer2 Range for Relay is 300000000 km (max distance between home and planet)
		//	Outer3 Range for Relay is greater than 300000000 km
		//
		outer1Limit		= (100000000 * 1000) - @homeWorldSMA   	// Convert to meters
		outer2Limit		= (300000000 * 1000) - @homeWorldSMA	// Convert to meters
	}

	DATA
	{
		type 	= Double
		bodyCount = @/allPlanets.Count()
		innerCount = @/innerBodies.Count()
		innerCountSurface = @/innerBodiesSurface.Count()
		outerCount = @/outerBodies.Count()
		outerCountSurface = @/outerBodiesSurface.Count()
		homeNum	= @/innerCount 					// List number starts at 0, so no need to increment count by 1 
	}

	DATA
	{
		type 	= CelestialBody
		home = @/allPlanets.ElementAt(@/homeNum)
		firstInner = @/allPlanets.ElementAt(@/homeNum - 1)
		firstOuter = @/allPlanets.ElementAt(@/homeNum + 1)
	}

	DATA
	{
		type		= List<CelestialBody>
		requiredValue	= false
		
		homeBodies	= AllBodies().Where(cb => (cb.IsHomeWorld() || cb.Parent().IsHomeWorld() ))
		
		// Find all the Moons around the HomeWorld
		homeMoons 			= AllBodies().Where(cb => (cb.Parent().IsHomeWorld() ))
		homeMoonsSurface 	= AllBodies().Where(cb => (cb.Parent().IsHomeWorld() && cb.HasSurface() ))
		moonsOrbited 		= OrbitedBodies().Where(cb => cb.Parent().IsHomeWorld() && cb !=HomeWorld() )
		reachedMoons		= ReachedBodies().Where(cb => cb.Parent().IsHomeWorld())
		orbitedMoons		= OrbitedBodies().Where(cb => cb.Parent().IsHomeWorld())
		landedMoons			= LandedBodies().Where(cb => cb.Parent().IsHomeWorld())
		returnedMoons		= ReturnedFromBodies().Where(cb => cb.Parent().IsHomeWorld())
		firstMoon			= HomeWorld().Children().First()
		
		// Find all the planets in the home system
		allPlanets = HomeWorld().Parent().Children()
		allPlanets2 = HomeWorld().Parent().Children().Exclude(HomeWorld())
		allSurfaceBodies = AllBodies().Where(cb => cb.HasSurface())
		
		// Find the Inner Planets from the HomeWorld
		innerBodies = AllBodies().Where(cb => cb.SemiMajorAxis() <= @homeWorldSMA && cb.IsPlanet() && cb != HomeWorld() && cb.Parent() == HomeWorld().Parent() )
		innerBodiesSurface = AllBodies().Where(cb => cb.SemiMajorAxis() <= @homeWorldSMA && cb.IsPlanet() && cb.HasSurface() && cb != HomeWorld() && cb.Parent() == HomeWorld().Parent() )
		systemMoons = AllBodies().Where(cb => cb.IsMoon() && cb.Parent() != HomeWorld() )
		innerMoons	= @systemMoons.Where(cb => cb.Parent().SemiMajorAxis()<= @homeWorldSMA)
		innerMoonsSurface = @innerMoons.Where(cb => cb.HasSurface())
				
		// Find the Outer Planets from the HomeWorld
		outerBodies = AllBodies().Where(cb => cb.SemiMajorAxis() >= @homeWorldSMA && cb.IsPlanet() && cb != HomeWorld() && cb.Parent() == HomeWorld().Parent() )
		outerBodiesSurface = AllBodies().Where(cb => cb.SemiMajorAxis() >= @homeWorldSMA && cb.IsPlanet() && cb.HasSurface() && cb != HomeWorld() && cb.Parent() == HomeWorld().Parent() )
		outerBodiesGas	   = AllBodies().Where(cb => cb.SemiMajorAxis() >= @homeWorldSMA && cb.IsPlanet() && !cb.HasSurface() && cb != HomeWorld() && cb.Parent() == HomeWorld().Parent() )
		outerBodies1	= @outerBodies.Where(cb => cb.SemiMajorAxis() <= @outer1Limit)
		outerBodies2	= @outerBodies.Where(cb => cb.SemiMajorAxis() > @outer1Limit && cb.SemiMajorAxis() <= @outer2Limit)
		outerBodies3	= @outerBodies.Where(cb => cb.SemiMajorAxis() > @outer2Limit)
		outerMoons	= @systemMoons.Where(cb => cb.Parent().SemiMajorAxis() >= @homeWorldSMA)
		outerMoonsSurface = @outerMoons.Where(cb => cb.HasSurface())
		
		// Find the next series of Unreached Bodies, Orbited Bodies, and Reached Bodies
		nextBodies		= NextUnreachedBodies(4).Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		nextBodiesAll	= NextUnreachedBodies(4)
		reachedBodies	= ReachedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		OrbitedBodies	= OrbitedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		
		reachedPlanets	= ReachedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		orbitedPlanets	= OrbitedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		landedPlanets	= LandedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		returnedPlanets	= ReturnedFromBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )

	}

	DATA
    {
        type = int
        randomRoll = Random(1,10)
    }

	DATA
	{
		type = double
		FundAdv 	= 50000
		FundComp 	= 50000
		FundFail	= 50000
		RepFail		= 10
		RewardRep 	= 10
		RewardSci 	= 5
		//
		title = Configure the base configuration for contract rewards
		requiredValue = false
	}

	// ================================================= Setup different Contract Groups
	
	CONTRACT_GROUP
	{
		name = EarlySpaceProgram
		displayName = Early Space Program
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 10

	}

	CONTRACT_GROUP
	{
		name = KerbinAeronautics
		displayName = Aeronautics & Experimental Planes
		agent = Aeronautics
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 20
	}

	CONTRACT_GROUP
	{
		name = Satellites
		displayName = Satellites
		agent = SatelliteMissions
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 30

	}

	CONTRACT_GROUP
	{
	    name = CommSatGroup
		displayName = Satellite Communcation Missions
		agent = CommSatGroup
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 40
		
		DATA
		{
			type 	= Double
			title = Set the minimum Power Relay for the contract group
			requiredValue = false			
			minRelayHome 	= 5000000 // HG-5 or equivalent
			minRelayMoon 	= 5000000 // HG-5 or equivalent
			minRelayInner	= 2000000000 // RA-05 or equivalent
			minRelayOuter1	= 2000000000 // RA-05 or equivalent
			minRelayOuter2	= 15000000000 // RA-50 or equivalent
			minRelayOuter3	= 100000000000 // RA-100 or equivalent
		}

	}
	
	CONTRACT_GROUP
	{
		name = MoonExploration
		displayName = Homeworld Moons Exploration
		agent = HomeMoonsExploration
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 50
	}

	CONTRACT_GROUP
	{
		name = SpaceStations
		displayName = Space Stations
		agent = SpaceStations
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 60
	}

	CONTRACT_GROUP
	{
		name = AdvancedExploration
		displayName = Advanced Exploration
		agent = AdvancedExploration
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 15
	}

	CONTRACT_GROUP
	{
		name = InnerPlanetExploration
		displayName = Inner System Planets Exploration
		agent = InnerPlanet
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 80
	}

	CONTRACT_GROUP
	{
		name = OuterPlanetExploration
		displayName = Outer Planets Exploration
		agent = OuterPlanetsExploration
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 90
	}

	CONTRACT_GROUP:NEEDS[BeyondHome]
	{
		name = InterstellarExploration
		displayName = Interstellar Exploration
		agent = InterstellarExploration
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 100
	}


}